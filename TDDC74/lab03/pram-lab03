(load "interaction-utils.scm")

;; Problem 1


;; applicerar en procedur på vart och ett av elementen i listan 

(define (for-each-element procedure lst)
  (if (not (null? lst))
      (begin (procedure (car lst)) (for-each-element procedure (cdr lst)))))

;; Problem 2
;; Vänder på en lista

(define (rev l)
  (let ((res '())) ; introduce a local variable for the result
    (define (loop)
      (if (null? l)
          res
          (begin 
           (set! res (cons (car l) res))
           (set! l (cdr l))
            (loop))))
    (loop)))


;;Problem 3

(define count-calls
  (let ((count 0))
    (lambda entry
      (cond
        ((null? entry) (set! count (+ count 1)) count)  
        ((eq? (car entry) 'how-many-calls) count)
        ((eq? (car entry) 'reset) (set! count 0))
        (else (printf "Illegal entry"))))))



;;Problem 5

(define (make-monitored fn)
  (let ((count 0))
    (lambda entry
      (cond ((null? entry) (printf "Must insert entry"))
            ((eq? (car entry) 'reset) (set! count 0))
            ((eq? (car entry) 'how-many-calls) count)
            (else
               (set! count (+ count 1))
               (apply fn entry))))))

;; Problem 7


(define (convert-loop op)
    (define (loop)
    (let ((input (read)))
      (cond ((eq? input 'quit) (display "byebye"))
            ((number? input) 
             (newline) (display* input " -> " (op input)) (loop))
            (else 
             ((display "~a is not a number. Try again." input) (loop))))
      (loop)))
  (loop))


    
        
        
  
  
  


 
